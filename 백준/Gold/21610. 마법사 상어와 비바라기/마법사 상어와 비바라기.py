# https://www.acmicpc.net/problem/21610
# 백준 21610 마법사 상어와 비바라기

# arr[r][c]는 (r, c)에 있는 바구니에 저장되어 있는 물의 양
# 격자의 가장 왼쪽 윗 칸은 (1, 1)이고, 가장 오른쪽 아랫 칸은 (N, N)
# 1번 행과 N번 행을 연결했고, 1번 열과 N번 열도 연결 => % n
n, m = map(int, input().split())
arr = [list(map(int, input().split())) for _ in range(n)]

# 구름에 이동을 M번 명령 / i번째 이동 명령은 방향 di과 거리 si로 이루어져 있다
# [[방향1, 거리1], [방향2, 거리2], ...]
# 비바라기를 시전하면 (N, 1), (N, 2), (N-1, 1), (N-1, 2)에 비구름이 생긴다
cloud_list = [(n - 1, 0), (n - 1, 1), (n - 2, 0), (n - 2, 1)]

# 방향은 총 8개의 방향이 있으며, 8개의 정수로 표현
# 1부터 순서대로 ←, ↖, ↑, ↗, →, ↘, ↓, ↙
# 좌, 좌상, 상, 우상, 우, 우하, 하, 좌하
dy = [0, -1, -1, -1, 0, 1, 1, 1]
dx = [-1, -1, 0, 1, 1, 1, 0, -1]

# 1) 모든 구름이 di 방향으로 si칸 이동
# 2) 각 구름에서 비가 내려 구름이 있는 칸의 바구니에 저장된 물의 양이 1 증가
# 3) 구름이 모두 사라진다
# 2)에서 물이 증가한 칸 (r, c)에 물복사버그 마법을 시전한다.
# 4) 물복사버그 마법을 사용하면, 대각선 방향으로 거리가 1인 칸에 '물이 있는 바구니의 수'만큼 (r, c)에 있는 바구니의 물이 양이 증가
# - 이때는 이동과 다르게 경계를 넘어가는 칸은 대각선 방향으로 거리가 1인 칸이 아니다.
# - 예를 들어, (N, 2)에서 인접한 대각선 칸은 (N-1, 1), (N-1, 3)이고, (N, N)에서 인접한 대각선 칸은 (N-1, N-1)뿐이다.
# 5) 바구니에 저장된 물의 양이 2 이상인 모든 칸에 구름이 생기고, 물의 양이 2 줄어든다. 이때 구름이 생기는 칸은 3)에서 구름이 사라진 칸이 아니어야 한다.

for _ in range(m):
    d, s = map(int, input().split())  # 방향, 이동거리
    cloud_list2 = []    # 구름이 생긴 리스트
    for ci, cj in cloud_list:
        # ci + dy[d - 1] * s 의 결과가 음수일 수 있으므로 +n을 해준다 *(주의)
        ni, nj = (ci + dy[d - 1] * s + n) % n, (cj + dx[d - 1] * s + n) % n
        arr[ni][nj] += 1    # 각 구름에서 비가 내려 구름이 있는 칸의 바구니에 저장된 물의 양이 1 증가
        cloud_list2.append((ni, nj))

    # 물이 증가한 칸에 물복사버그 마법을 시전
    # 대각선 방향으로 거리가 1인 칸에 '물이 있는 바구니의 수'만큼 바구니의 물이 양이 증가
    visited = [[0] * n for _ in range(n)]
    for ci, cj in cloud_list2:
        visited[ci][cj] = 1     # 구름이 생김을 표시
        for dr in range(1, 8, 2):
            ni, nj = ci + dy[dr], cj + dx[dr]
            if 0 <= ni < n and 0 <= nj < n and arr[ni][nj] > 0:
                arr[ci][cj] += 1

    # 바구니에 저장된 물의 양이 2 이상인 모든 칸에 구름이 생기고, 물의 양이 2 줄어든다.
    # 이때 구름이 생기는 칸은 구름이 사라진 칸이 아니어야 한다.
    cloud_list = []     # 구름 위치 초기화
    for i in range(n):
        for j in range(n):
            if arr[i][j] >= 2 and visited[i][j] == 0:
                arr[i][j] -= 2
                cloud_list.append((i ,j))

# M번의 이동이 모두 끝난 후 바구니에 들어있는 물의 양의 합 출력
answer = sum(map(sum, arr))
print(answer)
